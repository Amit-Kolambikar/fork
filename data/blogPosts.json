[
    {
        "title": "Who Likes Integers, Anyway?",
        "class": "2014-11-22",
        "date": "November 22, 2014",
        "hidden": "<ol>\n<li>Fade out all the words that are different between each set of subsequent sentences.</li>\n<li>For each word that is getting replaced, expand or contract the space where it just was to be the size of the new word.</li>\n<li>Fade in the new word, which now has a container of perfect size.</li>\n</ol>\n\n\n<p>The tricky part of this effect ends up being resizing the container to be the exact size of the upcoming word.  Setting the container to have <code>width: auto</code> in CSS will allow it to fit the size of it's contents, but there is no way to animate between two different sizes that result from using <code>width: auto</code> on different words.  To perform the animation appropriately, I perform a more complicated set of operations:</p>\n\n<ol>\n<li>Calculate the width of the old word, call that <code>oldWidth</code>.</li>\n<li>Set the width of the container to be exactly <code>oldWidth</code>.  (This results in no visual change, because it's the same width as <code>auto</code>, but it changes how the width is calculated.)</li>\n<li>Fade out the old word.</li>\n<li>Calculate the width of the new word, call that <code>newWidth</code>.</li>\n<li>Animate the container from <code>oldWith</code> to <code>newWidth</code>.</li>\n<li>Fade in the new word.</li>\n<li>Set the width of the container back to <code>auto</code>. (Again, this should result in no change, because the new word should perfectly fit inside its container)</li>\n</ol>\n\n\n<p>So while this system seems like it would work perfectly, I was running into a bug where despite calculating the size of the new and old word and animating properly, the containers of size <code>newWidth</code> and <code>oldWidth</code> didn't quite fit the new and old words (sometimes too big, sometimes too small).  This was really aggravating, because I used JavaScript to determine the width of the elements at <code>newWidth</code> and <code>auto</code>, and they were the same!</p>\n\n<p><pre><code class=\"javascript\">$word.width('auto');                  // Word looks good\nvar oldAutoWidth = $word.width();\n$word.width(oldAutoWidth);            // Word doesn't fit in container\nvar oldWidth = $word.width()\nconsole.log(oldWidth == oldAutoWidth) // True\n</code></pre></p>\n\n<p>How could it be the <em>same size</em> yet still appear different?  I took to the handy chrome inspector, looking for anything that might be different, and I found it!  It turns out that the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value\">computed value</a> of the element's width after changing it's style differed by a <em>fraction of a pixel</em>.</p>\n\n<p>So you might be thinking \"Hey wait, how could a computer monitor display a fraction of a pixel?\".  It's true, it can't.  Although each pixel in a montior can be set to only one value at a time, web browsers work at an abstraction level away from the discrete pixels of screens.  If the browser calculates that text takes up 89.224 pixels and that text is placed in a container of width 89 pixels, it will push the last character onto the next line.  I tried every way to find the width of an element that I could think of, but every method returned an integer.  Aggrivating!</p>\n\n<p>The solution, it turns out, was to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.getComputedStyle\"><code>Window.getComputedStyle()</code></a>, which until this point I didn't even know existed:</p>\n\n<p><pre><code class=\"javascript\">$word.width('auto');                  // Word looks good\nvar oldWidth = window.getComputedStyle($word, 'width');\n$word.width(oldWidth);                // Word looks good\n</code></pre></p>\n\n<p>This returns a string like <code>\"89.224px\"</code>, which I could then parse and modify if needed. Once I started using <code>Window.getComputedStyle()</code> in my calculations, all my animations became perfectly smooth, on every browser I tested.  (That includes Chrome for Android, Chrome for iOS, Safari Mobile, and Chrome, Firefox, and Safari on desktop.)  It was a pretty crazy solution, and I kind of <a href=\"https://github.com/danrschlosser/danrs-ch/commit/5916bc0b6e64f563608c1581224849b3be83af96#diff-9f88450194904e3d43b9a7c39f7d7d4eL199\">freaked out</a> when I got it working.</p>\n\n<p>So I'm a pro at working with fractional pixels now, I guess.  What's next?</p>\n</body>\n</html>",
        "preview": "<p>It's a <a href=\"http://danrschlosser.com/blog/post-2014-03-01\">well documented phenomenon</a>: I spend too much time tweaking my personal site.  I've spent enough time working on the current iteration that even the smallest quirks or bugs get on my nerves.</p>\n\n<p>At the top of that list was a problem with the rotating tagline sentences.  It's a cool effect, but  a pain to execute.  Here's a quick summary of how the animation works:</p>",
        "id": "2014-11-22"
    },
    {
        "title": "How the Pebble Launched the Smartwatch Revolution",
        "class": "2014-11-13",
        "date": "November 11, 2014",
        "hidden": "<p>The Pebble was the first successful smartwatch because it presented a fundamentally different paradigm for interaction with smartphones.  The Pebble team didn\u2019t dream up pie-in-the-sky features, they executed well on a few fundamental ones: notifications, remote control, and fitness. The Pebble aimed to be the perfect smartphone companion. Receiving notifications on the Pebble let users choose what would interrupt their day, a notable shift in user experience.  Pebble promised to increase the signal to noise ratio from a user\u2019s smartphone, so that they might spend less time fussing with their devices, and more time focused and engaged with the world around them. An ambitious goal, to be sure, but not an unreasonable one.  Even at the margin, Pebble let users leave their phones in their pockets by moving simple tasks and notifications to the wrist.  When it shipped in 2012 for $150, the Pebble worked with Android and iOS. At that price, it aimed to be the smartwatch for everyone.</p>\n\n<p>With apps like Yelp, Foursquare, and PebbleBucks, Pebble fostered excitement for an ecosystem of watch apps that would transform the smartphone yet again.  Paying for coffee using a watch may not have sold Pebbles on its own, but it represented the new possibilities that came from having a computer on your wrist.  That said, Pebble\u2019s success did not exist in a vacuum. Google Trends shows that in 2012 increased interest in \u201cPebble Watch\u201d correlated with interest in \u201cSmartwatch\u201d.  Pebble was poised to dominate a new product category, but in building media attention it also prompted competitors to develop their own smartwatches.</p>\n\n<p><img src=\"/static/img/interest.png\" alt=\"Interest in Pebble Smartwatches\" /></p>\n\n<p>In keeping with their smartphone strategy, Samsung designed the Galaxy Gear to build on top of the Pebble\u2019s feature set, offering voice calls and a wrist-mounted camera and bundling it with the Galaxy Note 3. Their leading marketshare does not represent meaningful competition to Pebble, however; the Gear is overwhelming and hard to use. Google, in contrast, sought to simplify the role of the smartwatch.  Playing to its strength\u2014cloud services\u2014Google designed Android Wear as a portal into Google Now.  Android Wear harnesses Google\u2019s knowledge about its users to provide the right information at the right time, a natural extension of Pebble\u2019s offering.  Google\u2019s ability to parse emails, analyze search history, and read from on-device sensors allows Android Wear to augment Pebble\u2019s notifications with a layer of insight.  Instead of just listing a user\u2019s latest messages like the Pebble would, Android Wear can surface flight information and let users respond with their voice.  Wear is very opinionated from a design prospective and does not leave much room for user customization, but this is in service to the user experience.   With Android Wear running on stylish hardware like Motorola\u2019s Moto 360, Google is much stronger competition for Pebble than Samsung.</p>\n\n<p>Apple will take yet another approach with the Apple Watch.  By focusing on industrial design and offering a variety of styles and straps, Apple has positioned the Watch as a piece of jewelry rather than mere wearable tech. It is clear that Apple will alleviate any hesitation that consumers had with buying the perceivably \u201cnerdy\u201d Pebble or Android Wear devices with its more luxurious line of watches.  That said, the Apple Watch\u2019s presumably high price may turn away others.  While consumers are accustomed to upgrading their phones every two years, they expect watches to last for much longer than that. Apple\u2019s focus on designing and selling beautiful hardware will make them a serious competitor to Pebble, especially if they\u2019re able to continue their history of selling premium first-generation products at premium price points.</p>\n\n<p>Due to a lack of engineering infrastructure and brand recognition, the Pebble is faced with significant, possibly insurmountable challenges in the coming years.  If Pebble is to keep up with Google and Apple, it needs to differentiate.  The Pebble team should focus their brand on being customizable, fun-loving, and perhaps even silly.  In keeping with their current aesthetic, they could launch a new hardware line that offers customization as a service, allowing shoppers to choose from a large color selection and then customize their Pebble with 8-bit art.  That, in combination with some lighthearted TV ads, might allow Pebble to avoid direct competition with Samsung, Google, and Apple.  A recent redesign to the <a href=\"https://getpebble.com\">Pebble website</a> has started to take steps in this direction, but unfortunately comes off as overly defensive and self-deprecating.  The main header reads \u201cBreathe, everyone - It\u2019s just a watch,\u201d and the final pane says \u201cJust to recap - we made a watch - we didn't solve global warming.\u201d  They\u2019re wrong, though.  The Pebble is not \u201cjust a watch\u201d: it started a revolution in wearable computing that they are slowly losing their grip on.  The Pebble will not be able to compete directly with Google and Apple in the areas in which those companies excel, and Pebble\u2019s current attitude towards that competition tells a troubling story about their capacity to adapt.</p>\n\n<p>The Pebble was responsible for launching an entirely new product category, in which many smartphone giants are now fiercely competing. While Pebble\u2019s early success was due to its execution of relatively pedestrian features, that won\u2019t sustain its position in the marketplace.   Being revolutionary doesn\u2019t mean that the Pebble can rest on its laurels, unless it wants to join the ranks of BlackBerry and Palm.  The Pebble was a landmark device because it brought the smartwatch out of science fiction.  If it wants to sustain its relevance, it must commit to differentiation through aesthetic, software, and branding.</p>\n</body>\n</html>",
        "preview": "<p>The <a href=\"http://danrschlosser.com/blog/post-2013-08-18\">Pebble Smartwatch</a> is one of the most impactful devices released in the past two years.  It captured the attention of the entire technology industry, all without trying to do anything extraordinary.  The Pebble is a gadget out of science fiction, but only offers the simplest subset of smartphone features for the wrist.  It catalyzed a wearable technology movement, forcing established smartphone companies like Apple and Google to consider smartwatches for their platforms. Those smartwatches were all designed in reference to the Pebble, and are competing vigorously with it.  While it seems likely that the Pebble\u2019s competition will overtake it in the coming years, without the Pebble, those devices would not exist as they are today.</p>",
        "id": "2014-11-13"
    },
    {
        "title": "Eventum: An Event-Driven CMS",
        "class": "2014-09-26",
        "date": "September 26, 2014",
        "hidden": "<h4>The Problem</h4>\n\n<p>At the time, the ADI website was loading the details for upcoming workshops and tech talks using the Google Calendar API in JavaScript.  Every time someone visited <a href=\"http://adicu.com\">adicu.com</a>, their browser requested the last month's worth of events from Google Calendar, and then painstakingly parsed them into HTML.  What's worse is that we needed to hold separate resources, short description, and long description all in the description field of the Google Calendar event.  Gross.  To accomplish this, said description <em>had</em> to be formatted as follows:</p>\n\n<pre><code>Short Description\n---\nLong Description\n---\nslides --&gt; http://link-to-slides.com/this_event\ncode samples --&gt; http://github.com/adicu/this_event\n...\n</code></pre>\n\n<p>It was painful.  The JavaScript (which I dug up directly from our old site) says it all:</p>\n\n<pre><code class=\"javascript\">var parts = event.description.split(\"---\");\nevent.description = parts[0];\n\nif(parts.length == 3) {\n    event.longDescription = parts[1];\n    var resources = parts[2];\n    resources = resources.split(\"-->\");\n    event.resources = {};\n\n    for(var x=0; x&lt;resources.length; x+=2) {\n      event.resources[resources[x].toLowerCase().trim()] = resources[x+1];\n    }\n}\n</code></pre>\n\n<p>This string parsing is extremely expensive when it's being done on every event we pulled in, every time our front page loaded.  I knew we could do better.</p>\n\n<p>But, with our website running in <a href=\"http://jekyllrb.com\">Jekyll</a> on <a href=\"https://pages.github.com/\">GitHub Pages</a>, we couldn't run any server code that would cache our Events, because Jekyll only serves static files. If we were to solve this problem, then we'd need to run <a href=\"http://adicu.com\">adicu.com</a> on a real web server.</p>\n\n<h4>The Idea</h4>\n\n<p>This is when I came up with the idea for <a href=\"https://github.com/danrschlosser/eventum\">Eventum</a>, an event-driven content management system (CMS) that syncs with Google Apps.</p>\n\n<p>The idea behind Eventum is that on sites like ADI's, creating events is just as important as creating blog posts.  Technologies like <a href=\"http://jekyllrb.com\">Jekyll</a> were great for ADI as we were starting out, because we could advertise new events or share a cool hackathon project just by writing a Markdown file. (Jekyll converts a folder full of Markdown files into a static blog site. It's really cool!)  As we grew however, we wanted a more full-featured solution for our events, and we couldn't find one.</p>\n\n<p>As I began to mock up the early versions of Eventum, I laid some basic features that our new events system would need.  First: Markdown editing.  Markdown is  simple to learn, extremely portable, and sufficiently powerful; plus, it's what ADI used for writing blog posts and event announcements.  Second: Sync with Google Calendar.  ADI members rely very heavily on our Google Calendar as the definitive state of what events we a running and when, and I couldn't just take that away.  And finally: Support for our two-calendar system.  We use a private calendar for tentative events, and a public calendar for announced events.  Eventum would need to manage events across both calendars in order to fit in with ADI's workflow.</p>\n\n<h4>The Implementation</h4>\n\n<p>Fast forward to today, the first version of Eventum powers <a href=\"http://adicu.com\">ADI's new website</a> (which, incidentally, has recently gotten a face-lift).  It's far from perfect, but being able to edit events through a webapp rather than in the Google Calendar description field is a definite plus.</p>\n\n<p>Eventum is built in <a href=\"https://www.python.org/\">Python</a> and <a href=\"http://flask.pocoo.org/\">Flask</a>, and blog posts and events use <a href=\"http://epiceditor.com/\">EpicEditor</a> for in-browser Markdown editing.  Also, Eventum supports ADI's two-calendar system: when you publish an event, it is flipped from our tentative calendar to our public calendar.</p>\n\n<p><img src=\"/static/img/editors.png\" alt=\"editors\" /></p>\n\n<p>The \"Home\" page shows this weeks events and the most recent blog posts on the site.</p>\n\n<p><img src=\"/static/img/home.png\" alt=\"home\" /></p>\n\n<p>The \"Events\" page gives an overview of this week and next week's events.</p>\n\n<p><img src=\"/static/img/events.png\" alt=\"events\" /></p>\n\n<p>Eventum also has a permission system that allows administrators to limit what different users can do on Eventum (generate content, publish it, or manage user accounts), and an interface to manage images uploaded to the page.</p>\n\n<hr />\n\n<p>This first version of Eventum covers the basic needs that I enumerated at the start of the summer, but it's far from finished.  I'm still building out new features and <a href=\"https://github.com/danrschlosser/eventum/issues\">resolving bugs</a>.  The <a href=\"https://github.com/danrschlosser/eventum\">Eventum codebase</a> is currently intertwined with the ADI website, and I'm hoping to separate the two soon.  In doing so, it could at some point become a plug-and-play CMS.</p>\n\n<p>I've already had some help from ADI board members to brainstorm new features and layout a roadmap for development.  Moreover, members of the newly-formed <a href=\"http://adicu.com/labs\">ADI Labs</a> program (including myself) will be adding new features to Eventum and making it even better.  Hey, maybe one day I'll <a href=\"https://github.com/danrschlosser/eventum/issues/1\">actually have test coverage</a>.</p>",
        "preview": "<p>Late April, 2014.  I'm clicking through the <a href=\"https://www.google.com/calendar/embed?src=adicu.com_tud5etmmo5mfmuvdfb54u733i4%40group.calendar.google.com&amp;ctz=America/New_York\">public Google Calendar</a> for <a href=\"http://adicu.com\">ADI</a>, Columbia's tech club.  I'm editing the details of one our last events for the year, and I'm pissed.  I was participating in a coordinated attack on our website's performance, and I was doing so willingly.</p>",
        "id": "2014-09-26"
    },
    {
        "title": "I Hate Cross-Browser Compatibility: A Website Redesign Gone Wrong",
        "class": "2014-03-01",
        "date": "March 1, 2014",
        "hidden": "<h5 id=\"the-rotating-tagline\">The Rotating Tagline</h5>\n<p>My new website was really supposed to be simple, I swear.  Just my name, how to contact me, and a blog post or three.  After I drew together a mockup however, I quickly began to feel that I needed something more fun.  From that urge came the idea for a rotating tagline. I could just throw a couple of sentences in to JavaScript and have it cycle through them.  Simple. </p>\n<p>The basic pseudo-code for my JavaScript is as follows:</p>\n<pre><code class=\"pseudocode\">every 6 seconds:\n    do:\n        newSentance := someRandomSentance()\n    while numWordsShared(newSentance, currentSentance) &lt; 1\n\n    for each newWord, oldWord in newSentance, currentSentance:\n        if newWord != oldWord:\n            oldWord.fadeOut()\n            containerForWord.resize(newWord.width())\n            newWord.fadeIn()\n\n    currentSentance := newSentance\n</code></pre>\n\n<p>Challenges here start with <code>newWord.width()</code>.  How do you find the width of arbitrary text in JavaScript?  My first instinct was to write some function that takes the text size and number of characters and interpolates, but as you can imagine this was a nightmare on one browser, never mind multiple.  Even if I were to have used a fixed width font (I considered it), slight differences in text rendering yield jumps in the animation, or text that is cut off.  No, I'd have to try something else.  </p>\n<p>After some creative Googling, I found and adapted a function that calculates text width by creating an invisible text element on the page with the same styling as the text in question. Take a look:</p>\n<pre><code class=\"javascript\">function calculateWordWidth(text, classes) {\n    classes = classes || [];\n    classes.push('textDimensionCalculation');\n    var div = document.createElement('div');\n    div.setAttribute('class', classes.join(' '));\n    div.innerHTML = text;\n    document.body.appendChild(div);\n    var width = jQuery(div).outerWidth(true);\n    div.parentNode.removeChild(div);\n    return width;\n}\n</code></pre>\n\n<p>Fairly straightforward, but definitely non-obvious.  The element is created, given all the classes passed in, and then given the <code>testDimensionCalculation</code> class, which makes it invisible and absolutely positioned (as to not interfere with any elements the user can see):</p>\n<pre><code class=\"css\">.textDimensionCalculation {\n    position: absolute;\n    visibility: hidden;\n    height: auto;\n    width: auto;\n    display: inline-block;\n    white-space: nowrap;\n}\n</code></pre>\n\n<p>After the width of the <code>&lt;div&gt;</code> is calculated, it is destroyed. </p>\n<p>With the width of the text determined, the next step would be to implement the word replacement.  The markup, it turns out, was more challenging than I would have expected.  My first instinct was to wrap each word in a <code>&lt;span&gt;</code>, and manipulate them in JavaScript:</p>\n<pre><code class=\"html\">&lt;div class=&quot;sentence&quot;&gt;\n    I &lt;span class=&quot;verb&quot;&gt;verb&lt;/span&gt;\n    &lt;span class=&quot;obj&quot;&gt;object&lt;/span&gt;\n    &lt;span class=&quot;preposition&quot;&gt;preposition&lt;/span&gt;\n    &lt;span class=&quot;noun&quot;&gt;noun&lt;/span&gt;.\n&lt;/div&gt;\n</code></pre>\n\n<p>Consider animating from the word \"preposition\" to the word \"about\", however.  When the width of the <code>&lt;span&gt;</code> is animated, the text starts to break up into multiple lines , and the height of the <code>&lt;span&gt;</code> increases randomly.  This causes spastic jumping of different words during the animation.  In order to smoothly animate words, I put each <code>&lt;span&gt;</code> in a container, and added another <code>&lt;span&gt;</code> to control the actual width of the container.  Both <code>&lt;span&gt;</code> elements contain the same text, but one has an <code>invisible</code> class, and the other has a <code>visible</code> class.</p>\n<pre><code class=\"html\">&lt;div class=&quot;sentence&quot;&gt;\n    I\n    &lt;div class=&quot;word verb&quot;&gt;\n        &lt;span class=&quot;visible&quot;&gt;verb&lt;/span&gt;\n        &lt;span class=&quot;invisible&quot;&gt;verb&lt;/span&gt;\n    &lt;/div&gt;\n    ...\n</code></pre>\n\n<pre><code class=\"css\">.word {\n    display: inline-block;\n    height: 2.5rem;\n    position: relative;\n    text-align: center;\n    overflow: hidden;\n}\n\nword span {\n    top: 0;\n    position: relative;\n    overflow: hidden;\n    display: inline-block;\n}\n\n.visible {\n    height: 2.5rem;\n    display: inline;\n    position: absolute;\n    bottom: 0;\n    right:0;\n    left: 0;\n}\n\n.invisible {\n    visibility: hidden;\n}\n</code></pre>\n\n<p>The way this works is that the container doesn't ever have a width applied to it, rather the <code>invisible</code> <code>&lt;span&gt;</code> expands and shrinks.  The <code>visible</code> <code>&lt;span&gt;</code> has absolute positioning, so it has no influence on the size of its container. Then, in order to change between to words, I fade out the <code>visible</code> <code>&lt;span&gt;</code>, animate the <code>invisible</code> <code>&lt;span&gt;</code> to the new width, and then fade in the <code>visible</code> <code>&lt;span&gt;</code>.</p>\n<p>For alignment reasons, and because <code>&lt;div&gt;</code>s around all the words removes whitespace, I actually had to add <code>&lt;div class=\"word\"&gt;</code> elements containing just <code>&amp;nbsp;</code> and wrap \"<code>I</code>\" and \"<code>.</code>\" in <code>&lt;div&gt;</code> tags as well.</p>\n<pre><code class=\"html\">&lt;div class=&quot;sentence&quot;&gt;\n    &lt;div class=&quot;word&quot;&gt;\n        &lt;span&gt;I&lt;/span&gt;\n    &lt;/div&gt;&lt;div class=&quot;word&quot;&gt;\n        &lt;span&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;/div&gt;&lt;div class=&quot;word verb&quot;&gt;\n        &lt;span class=&quot;visible&quot;&gt;verb&lt;/span&gt;\n        &lt;span class=&quot;invisible&quot;&gt;verb&lt;/span&gt;\n    &lt;/div&gt;&lt;div class=&quot;word&quot;&gt;\n        &lt;span&gt;&amp;nbsp;&lt;/span&gt;\n    &lt;/div&gt;&lt;div class=&quot;word obj&quot;&gt;\n        &lt;span class=&quot;visible&quot;&gt;object&lt;/span&gt;\n        &lt;span class=&quot;invisible&quot;&gt;object&lt;/span&gt;\n    &lt;/div&gt;&lt;div class=&quot;word&quot;&gt;\n    ...\n</code></pre>\n\n<p>I had never heard of this being a problem before, but I actually ran into whitespace issues between the <code>&lt;div&gt;</code> elements that are <code>display: inline-block;</code>, which was solved most simply <a href=\"http://css-tricks.com/fighting-the-space-between-inline-block-elements/\">by removing any space after the closing tag of the <code>&lt;div&gt;</code></a> (<code>&lt;/div&gt;&lt;div class=...</code>).  It was a massive pain across different browsers.  Some browsers would display the sentence just as I expected, others would cut off part of the words, others would have an unnatural amount of spacing, etc.  The whitespace logic of HTML still deceives me, and because it's so loosely defined, there's no way to understand whether or not you're being compliant.</p>\n<h5 id=\"animated-name-abbreviation-the-blog-title\">Animated Name Abbreviation (The Blog Title)</h5>\n<p>When I was designing my blog, I wanted a fairly chromeless interface.  I don't need any fancy widgets, menus, other links, or pages.  My website is really just the splash page and my blog, so there really isn't anywhere else to go.  I did want a link back to the splash page from the blog though, so without any navigation bar there wasn't really any place to put it.  </p>\n<p>Enter my ridiculous idea for my name to animate into my initials and pin to the upper left corner of the screen as you scroll down the page.  I made it work for screens wider than 1024px, and lucky for me this behavior doesn't make sense on any smaller screens (because even if it did the JavaScript couldn't run on the mobile devices).  </p>\n<p>In order to achieve this, I calculate the percentage left in the animation as the (positive) percent of the total distance between the title and the top of the page that the user has scrolled:</p>\n<pre><code class=\"javascript\">var distanceToTop = $title.offset().top - $(window).scrollTop();\n...\nvar percentageLeft = Math.max(distanceToTop, 0)/$title.offset().top;\n</code></pre>\n\n<p>So if the Title is <code>200px</code> from the top of the screen, and the window has been scrolled <code>100px</code>, then the animation will be 50% complete.</p>\n<p>Now what is being animated?  I separate all the parts of my name into fragments, and animate each one appropriately.  This way, I can animate the lowercase letters and the spaces between my first, middle, and last name to zero, leaving my initials untouched.</p>\n<pre><code class=\"html\">&lt;div class=&quot;name-fragment&quot;&gt;\n  &lt;span&gt;D&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment fragment-first&quot;&gt;\n  &lt;span&gt;an&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment fragment-nbsp&quot;&gt;\n  &lt;span&gt;&amp;nbsp;&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment&quot;&gt;\n  &lt;span&gt;R&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment fragment-nbsp&quot;&gt;\n  &lt;span&gt;&amp;nbsp;&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment&quot;&gt;\n  &lt;span&gt;S&lt;/span&gt;\n&lt;/div&gt;&lt;div class=&quot;name-fragment fragment-last&quot;&gt;\n  &lt;span&gt;chlosser&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>I used the same <code>calculateWordWidth()</code> function to find the starting and ending widths of all of the <code>name-fragment</code> <code>&lt;div&gt;</code>s, and then I animated each of them incrementally from the starting to ending width based on <code>percentageLeft</code>.</p>\n<p>That process is pretty simple: figure out what stage of animation each piece should be in based on the distance scrolled from the top of the page, and then animate each element's width appropriately.  Where things get complicated is making this process responsive to screen size changes and compatible with multiple browsers.</p>\n<h5 id=\"making-it-all-cross-browser-compatible\">Making it all Cross-Browser Compatible</h5>\n<p>I knew I wanted my name to stay at the top of the page on mobile, but that brought up the problem of what if a desktop user was part of the way down the page and then resized from full width to tablet width or vice versa.  I already had my animation function <code>updateTitle()</code> bound to the window scroll event, but then I realized that I also needed to bind it to window resize:</p>\n<pre><code class=\"javascript\">$(window).scroll(updateTitle);\nwindow.addEventListener('resize', updateTitle);\n</code></pre>\n\n<p>Then, in <code>updateTitle()</code> I either update the animation if the screen is desktop width, or set the title to be at the top of the page on tablets and mobile.</p>\n<pre><code class=\"javascript\">function updateTitle() {\n    if ($(window).width() &gt; 1024) {\n        // Animate the title's width appropriately\n        ...\n    }\n    else {\n        doMobile();\n    }\n}\n\nfunction doMobile() {\n    // I set everything to it's original width and ensure that the\n    // title isn't fixed to the side of the screen.\n    $title.removeClass(&quot;fixed&quot;);\n    $fragmentNBSP.css({&quot;width&quot;: nbspWidth()});\n    $title.css({&quot;width&quot;: titleOriginalWidth()});\n    $fragmentFirst.css({&quot;width&quot;: fragmentFirstOriginalWidth()});\n    $fragmentLast.css({&quot;width&quot;: fragmentLastOriginalWidth()});\n    $fragmentFirstInnerText.css({&quot;width&quot;: fragmentFirstOriginalWidth()});\n    $fragmentLastInnerText.css({&quot;width&quot;: fragmentLastOriginalWidth()});\n}\n</code></pre>\n\n<p>Seems right, but I had forgotten something:  orientation changes on mobile.  Because when you rotate the screen neither the page scroll event or the window resize event are called, <code>updateTitle()</code> is never called despite the fact that the window size is different, and therefore all the elements are lined up improperly.</p>\n<p>The fix is easy, but I'm lucky I caught this, it's not often that I rotate my device in the middle of browsing a web page.  </p>\n<pre><code class=\"javascript\">window.addEventListener('orientationchange', updateTitle);\n</code></pre>\n\n<p>I didn't know about this until it started causing me trouble, but apparently, scrolling with a scroll wheel on a mouse is actually different from the browser's perspective than scrolling on a trackpad.  As a result, when I used a traditional mouse to scroll on my site, sometimes the <code>updateTitle()</code> function would not be called, or would be called unpredictably.</p>\n<p>The fix should have been easy: bind <code>updateTitle()</code> to the <code>wheel</code> event in JavaScript and call it a day.</p>\n<pre><code class=\"javascript\">window.addEventListener('wheel', updateTitle);\n</code></pre>\n\n<p>I thought this would be good enough, I was wrong. It turns out that both the <code>scroll</code> and <code>wheel</code> events will get called when you scroll down the page; it doesn't matter what actual device is being used to do the scrolling.  As result, sometimes I would scroll down the page just fast enough and my code would call <code>updateTitle()</code> twice, and the result would be a miscalculation of where the title belonged on the page.  This is because sometimes an event would be triggered when the user was near the top, but only resolve when they had scrolled down a ways, causing the title to float somewhere in the middle of a blog post &mdash; very annoying.  To solve this problem, I had to make clever use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout\"><code>setTimeout()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.clearTimeout\"><code>clearTimeout()</code></a>.</p>\n<p><code>setTimeout()</code> is a function that takes a function and an amount of time, and will execute that function in that amount of time.  The original call returns the id of the timeout, so it can be referenced later.  <code>clearTimeout()</code> takes a timeout id and will clear it, so the function call will never happen.</p>\n<pre><code>    /* Should run myFunction() in 1 second */\n    var id = setTimeout(myFunction, 1000);\n    clearTimeout(id);\n\n    function myFunction() {\n        alert(&quot;This never happens.&quot;);\n    }\n</code></pre>\n\n<p>Because I only want one call to <code>updateTitle()</code> when the user scrolls, but I want them to be able to scroll on a touch screen, trackpad, arrow keys, or mouse, I have to cancel any other call to <code>updateTitle()</code> when I create a new one. Check out the before / after, it's pretty ugly but it works:</p>\n<pre><code class=\"javascript\">/* Before */\n$(window).scroll(updateTitle);\nwindow.addEventListener('wheel', updateTitle);\nwindow.addEventListener('orientationchange', updateTitle);\nwindow.addEventListener('resize', updateTitle);\n\n/* After */\nvar scrollTimerId,\n    wheelTimerId,\n    orientationchangeTimerId,\n    resizeTimerId;\n$(window).scroll(function() {\n    clearTimeout(wheelTimerId);\n    clearTimeout(orientationchangeTimerId);\n    clearTimeout(resizeTimerId);\n    scrollTimerId = setTimeout(updateTitle, 1);\n});\nwindow.addEventListener('wheel', function() {\n    clearTimeout(scrollTimerId);\n    clearTimeout(orientationchangeTimerId);\n    clearTimeout(resizeTimerId);\n    wheelTimerId= setTimeout(updateTitle, 1);\n});\nwindow.addEventListener('orientationchange', function() {\n    clearTimeout(scrollTimerId);\n    clearTimeout(wheelTimerId);\n    clearTimeout(resizeTimerId);\n    orientationchangeTimerId = setTimeout(updateTitle, 1);\n});\nwindow.addEventListener('resize', function() {\n    clearTimeout(scrollTimerId);\n    clearTimeout(wheelTimerId);\n    clearTimeout(orientationchangeTimerId);\n    resizeTimerId = setTimeout(updateTitle, 1);\n});\n</code></pre>\n\n<p>I only set the timeout to <code>1</code> millisecond, but this ensure that multiple calls to <code>updateTitle()</code> don't stack up on each other.</p>\n<p>Even simple variable declarations started causing me trouble.  Did you notice in my <code>doMobile()</code> code that the value I'm setting <code>\"width\"</code> to is actually the result of a function call?  At first, I just had variables for the original widths of the elements:</p>\n<pre><code class=\"javascript\">var titleOriginalWidth = $('body').width();\nvar nbspWidth = calculateWordWidth(&quot;&amp;nbsp;&quot;, [&quot;site-title&quot;]);\n...\n</code></pre>\n\n<p>But this actually caused some problems.  </p>\n<p>When I move from mobile to tablet to desktop screen sizes, I change the font size on most of the elements on the page to make them fit better.  This is a problem for my animation variables however, because if the page is loaded as in desktop width and then resized to a smaller screen size, the original and final widths of the elements are with respect to the original screen size, not the new one. </p>\n<p>This was a <em>massive</em> pain, because after resizing the screen a few times, random text elements would be a few pixels to small, and my name would show up as \"Da R Schlosse\"  (which, if pronounced as two words in a pirate accent is actually not all that bad).  What makes this worse, is that if I reloaded the page, it would be fixed (because the original and final width variables would be recaclulated.)  My solution was to make these variables into functions, so the values would be computed in real time with respect to the window width. </p>\n<pre><code class=\"javascript\">var nbspWidth = function() {\n        return calculateWordWidth(&quot;&amp;nbsp;&quot;, [&quot;site-title&quot;]);\n    },\n    titleOriginalWidth = function() {\n        return $(&quot;body&quot;).width();\n    },\n    ...\n</code></pre>\n\n<h5 id=\"you-wont-believe-this-bug\">You Won't Believe This Bug</h5>\n<p>As a grand finale, I bring to you the most mind-boggling bug I experienced while making my website, and probably is the craziest bug I've ever had the pleasure of fixing.  I'll start with the symptoms:</p>\n<p>I would load the front page of my website, and everything looks good.  I click the pencil icon, navigating to the blog page, and everything looks good.  Then, I reload the page and my name gets cut off (the return of \"Da R Schlosse\").  I inspected element, and I saw that the <code>&lt;span&gt;</code>s that wrap the lowercase parts of my name were a few pixels too small.  Very weird.  I need to specifically define the width of these elements, so that I can animate them later, and now apparently when I refresh the page they are sized differently. </p>\n<p>Recall that my method for calculating the width of arbitrary text in JavaScript is the <code>calculateWordWidth()</code> function, which creates an invisible element on the page, applies classes that you pass it to the element, puts the string you want the width of into the element, finds it's width, and deletes the element.  To figure out why this wasn't working on refresh, I removed the line of code that removes the element from the document, and used the chrome inspector to make these elements visible (they were a bunch of <code>&lt;div&gt;</code>s at the bottom of the page).  </p>\n<p>I was expecting one of them to be improperly sized, but I found that they were all correct.  I then used the JavaScript console to rerun the <code>calculateWordWidth()</code> function again, and saw it happen live.  Everything worked as expected, and my name was not cut off.  This was <em>infuriating</em>.  Whatever was causing the <code>&lt;span&gt;</code>s around my name to be mis-sized was also covering its own tracks! </p>\n<p>So what really changes when you reload a web page?  Well, many smart browsers (including all three of the desktop browsers I was experiencing this problem in) cache static content like JavaScript and CSS if they determines that nothing has changed in these files between reloads.  The problem I was having was that while my JavaScript was being cached on reload (I used the \"Network\" tab to confirm that this resource was being <code>304</code>'d), the Cabin font that I request from Google Fonts was not.  The result was that my JavaScript was being executed before all the CSS files had loaded on the page, and therefore the invisible <code>&lt;div&gt;</code> I was creating had the fallback font, which has a different character width.  By the time I could inspect the <code>&lt;div&gt;</code>, the font had loaded however, so it appeared to be the right size.</p>\n<p>So how do I fix this bug?  Closer inspection of the <a href=\"http://api.jquery.com/ready/\">Document <code>.ready()</code></a> function.  Almost every JavaScript document wraps all functions and commands in a function that ensures that the code inside is only run once the page has loaded:</p>\n<pre><code class=\"javascript\">$( document ).ready(function() {\n  // Functions and commands go here\n});\n</code></pre>\n\n<p>The problem with this is that this doesn't wait for CSS and images to load, and so my font was not yet loaded.  I discovered that there was another function similar to <code>.ready()</code> that would wait for all assets to be loaded, and I replaced <code>.ready()</code> with that:</p>\n<pre><code class=\"javascript\">$(window).bind(&quot;load&quot;, function() {\n  // CSS and images will be loaded.\n});\n</code></pre>\n\n<p>And it worked!  It might have taken me hours and hours to finally figure it out, but I fixed it, and as result I don't have any problems, no matter how many times I reload the page.</p>\n<p>You might think that I'm a little crazy for investing this much energy into what could have been a really simple website, and on some levels you might be right.  Personal pages are meant to be simple, and there are a lot of tools to make a simple, attractive web page.  But because I didn't have any references for how to implement some of the visual tricks that I did, I found myself thinking about the knitty gritty of web development in new ways. I think that it's an important learning process.  Plus, where's the fun in having a WordPress?  </p>",
        "preview": "<p>There comes a time where I get just bored enough that I'm restless and not so bored that I'm lazy.  During these times, I code myself a website, usually from scratch.  The last time was around finals season of last year, and it resulted in the first iteration of my personal website (which despite my best intentions was bloated and ugly).  Anyway, it's happened again, and so now I have a new website. Hope you enjoy it!</p>\n<p>I had a pretty simple concept for this new site and it didn't take all that long to roll out, but along the way I ran into some pretty funky bugs, many of which almost brought me to tears.</p>",
        "id": "2014-03-01"
    },
    {
        "title": "Pebble Smartwatch, Artificial Beef, and Windows 8.1: Why We Need More Betas",
        "class": "2013-08-18",
        "date": "August 18, 2013",
        "hidden": "<p>The Pebble is currently the most popular consumer smartwatch in the market, but this may not be the case for long.  Google, Apple, Samsung, and others are all rumored to be developing smartwatches to be released later this year and into 2014.  The problem with these rumored smartwatches is that they will inevitably be sold as consumer products, rather than development devices. The difference with Pebble is that while neither it nor its soon-to-be-announced competitors will be a perfect implementation of a smartwatch, only Pebble will be open-source, meaning that I can install the Pebble SDK and start developing for it myself.  Purchasers of the Pebble have the distinct opportunity to be a part of defining the smartwatch market, and that is what is worth paying for.</p>\n\n<p>If the Pebble is viewed as a consumer product it does not hold up to expectations.  Notifications are not actionable, it is fairly useless without a companion smartphone, and its app ecosystem is small.  Whether the folks over at Team Pebble are saying it explicitly or not, their product is in beta.  I expect that those that want a Pebble just for personal use will be disappointed, and will probably be better off waiting a year or two for the market to mature.  The Pebble is best fitted for eager developers like me, and while it may be years until the smartwatch market is out of beta, the developer community will continue to support and drive innovation in the market.</p>\n\n<p>While I was tracking my Pebble shipment this week, I was also tracking a news story about the researchers who developed <a href=\"http://culturedbeef.net/\">the world's first lab-grown burger</a>, which is, in it's own way, a beta.  There are a lot of cool things about a future without factory farms, and this development could mean a radical shift in the meat production industry, quite likely for the better.  On the other hand, there are significant unexplored medical concerns with eating food grown in labs, and so until these issues are addressed, cultured beef will remain a laboratory product.  There isn't any way that these hamburgers could be put on supermarket shelves today, but that doesn't mean they won't sometime in the future.  The lab-grown hamburger is a proof of concept, meant to stir up discussion and interest about this topic, and it appears to have been successful.  I would wager that the FDA won't be approving this or any other \"food beta\" in the next year or two, but maybe if projects like these continue a healthier, cheaper, and more ecological meat product will be widely available in super-markets and restaurants.</p>\n\n<p>Betas are important.  At the most basic level, a beta represents a connection between developers and consumers.  Beyond the basic exchange of bug reports and feature suggestions, participation in a beta has symbolic meaning for both parties.  By putting their products in beta a company says \"We care about your input,\" and by participating a beta tester says \"I care about your product mission, I want you to keep working on this.\"  Beta testers are doing a very important job, both improving the product and staying the complaints of those that would have a project cancelled just because it isn't finished.  Betas are about what the product will look like, not what it looks like now.  Product mission is the reason why I have a Pebble on my wrist, and why I am running Windows 8.1 Preview on my laptop.  With Windows 8, Microsoft set out to design an intuitive and touch-friendly user interface that maintains the functionality of traditional Windows.  I am the first to admit that Windows 8.1 (and by extension Windows 8) doesn't deliver fully on this goal, but I want Microsoft to know that their work is important to me.</p>\n\n<p>I don't think that everyone should start buying beta products, and I don't think that every product should be beta-tested.  As a developer of products (of any kind, I would argue), it is important to consider whether or not you really know better than your customers what your product should look like.  The Pebble is most importantly a smartwatch platform for third-party development, just as the lab burger is most-importantly a conversation starter.  These products are not final and are not perfect, which is why living off of betas can be painful. (If you don't believe me, ask anyone with iOS 7 on their phone.)  The traditional product release model is too much of a guessing game.  Years of R&amp;D lead up to a product launch that has the development team crossing their proverbial fingers.  This is no bargain. Product design should be collaborative.  We need more betas.</p>",
        "preview": "<p>I got a Pebble this week.  (Not a rock, of course, I bought the <a href=\"http://getpebble.com/\">Pebble Smartwatch</a>: smartphone companion and Kickstarter sensation.)  I pre-ordered my Pebble six months ago after reading about what was and since has become the first practical smartwatch in existence.  It's chassis is attractive, and the e-paper display allows for excellent battery life.  It is packed full of sensors and meters, and still manages to be waterproof. Despite all this, the Pebble is ultimately a flawed product, and I knew this when I bought it. In fact, the Pebble's flaws were actually a large part of why I preordered it in the first place.</p>",
        "id": "2013-08-18"
    },
    {
        "title": "I like Macs and Hate Myself",
        "class": "2013-07-16",
        "date": "July 16, 2013",
        "hidden": "<p>I'm writing this because I've been working as an intern at Facebook for the past few weeks, writing code for upwards of nine hours a day on a 15-inch MacBook Pro with Retina Display.  I've had extensive, continuous exposure to OS X, not that I was given any choice in the matter. I've been developing for iOS, and this can only be done on a Mac. (Thanks, Apple.) I've been using OS X on school iMacs and friends' MacBooks for ages, but something was different this time, and I couldn't pin down what.</p>\n\n<p>When people ask me why I dislike OS X so much, I always found it easiest to point to it's collection of bundled software.  The only worthwhile app included on a Mac is Terminal; the rest are utter garbage.  Safari, iTunes, iPhoto, the App Store, Mail, Calendar, Contacts etc. can all be scrapped, in my opinion.  Naturally, when I started using my work laptop, I installed Chome, SublimeText, Mou, and so on. After all that customization was done, I slowly found myself growing more accustomed to the experience.  I found myself growing more\u2026 <em>fond</em> of the experience.</p>\n\n<p><strong>Hello my name is Dan and my next laptop will be a Mac.</strong></p>\n\n<p>On the technical end, switching to a Mac is tempting. Programming on a *nix-based machine is a must.  It will be great to be able to copy bash commands directly into Terminal instead of translating them into MS-DOS first. Moreover, unless I decide to work at Microsoft my career as a software engineer will be spent on a Mac.  I've toyed with switching to Linux, but that really just replaces one set of problems with another.  Linux is great for programming and a bummer from a UI/UX perspective.  Software support is lacking for Linux as well, which is all the more reason to avoid it.  It's true, you can do anything with Linux that you can with OS X, it's just a matter of how hard you have to work to get it done and how you feel about looking at some variation of Terminal all day.</p>\n\n<p>Also, OS X has a much more active developer community for non-gaming, non-enterprise software.  I can disable Dashboard, Launchpad, and the dock, and replace them with Alfred, MagicPrefs, and Cinch. Under all the iClutter, there's a quite usable operating system &mdash; and that's what is so surprising.  I've always faulted Macs for their software, but now it seems my criticisms have grown increasingly invalid. As a side note, I really enjoy using Spaces, and while I did have some multi-monitor issues on Mountain Lion, apparently Mavericks fixes them.</p>\n\n<p>The hardware on MacBooks is undeniably excellent.  The retina display is gorgeous, the trackpad is amazing, they have all the necessary ports (minus Ethernet, alas), and they run on top-of-the-line components. My problem with Mac hardware is actually more in finding a balance for features and portability.  The screen size and resolution on the 13\" laptops are both too small across the board (even for the 13\" MacBook Pro with Retina Display, which has an effective resolution of 1280 x 800). The 15\" MacBook Pro with Retina Display, while powerful, is noticeably heavier than my Lenovo Thinkpad X1 Carbon. Running a 13\" MacBook Pro with Retina Display at 1650 x 1050 is a decent option, but reviews have indicated that the 13\" model is underpowered, and I prefer full HD anyway.</p>\n\n<p>Obviously, if I am looking for a way to drop $2500 on a computer the choice is clear, but it's hard to stomach spending all that money if I'm not going to be using 90% of the included software. This is especially true looking forward; it's hard to ask me to spend a lot of money on a traditional laptop when there are some really enticing touch-enabled ultrabooks out there.</p>\n\n<p><strong>Confusions / Conclusions</strong></p>\n\n<p>There are so many problems with getting a Mac, and arguably just as many sitting with Windows.  Windows 8 is built on a strong core, but can be aggravating.  I don't exactly have problems with Windows 8, it's just not satisfying to usefor a nerd like me.  Behind the flashy Start Screen trash Windows 8 is a clean, fast operating system.  The same goes for OS X.  It's hard to justify buying a Mac just to put other software on it, but I realized that OS X now has both the ecosystem and hardware advantage over Windows, a recent shift to be sure.  A MacBook will never run PC games, which is why I have (and always will have) a Windows desktop.  The truth is that by continuing to use a Windows laptop, I'm only delaying the inevitable.  For programming, for design work, for running a website, and for general compatibility, OS X is where I'm headed.</p>\n\n<p>It pains me to think about carrying around a MacBook as my personal laptop. It's so much easier to complain about Apple as a company when I don't own any of their products, but I'm trapped.  I am going to have to learn to balance my moral opposition for Apple with the practicalities of life.  It may sound like I'm taking myself too seriously but it's true.  I'm going be on OS X sooner or later, so there's no reason not to switch now.  Especially with a new batch of Haswell-equipped MacBook Pros launching sometime this year, the hardware is increasingly enticing.  The question isn't if I'm going to buy a Mac, it's whether or not I'll be able to live with myself when I do.</p>",
        "preview": "<p><strong>Hello, my name is Dan and I am an Apple hater.</strong></p>\n\n<p>Most people that know me know that I can't stand Apple.  I don't like Apple's culture, the price tags on their products, or their design principles.  I think the iPod is dead, the iPhone is still a product of 2007, and the iPad needs a few more hours in the proverbial oven.  I could rant for hours about how Apple doesn't understand the Internet, or how they've \"screwed up this\" or \"forgotten about that.\"  I am not unfounded in my dislike for Apple, either; I am not just a techno-hipster that's \"too cool for school,\" if people still say that.   From my perspective, it seems apparent that Apple is on course to make some extremely serious mistakes in the next 10-15 years and that if they do so they will be the Blackberry or the Palm of 2030.</p>\n\n<p>But that's not why I'm writing this.</p>",
        "id": "2013-07-16"
    },
    {
        "title": "I'm on Flickr!",
        "class": "2013-06-29",
        "date": "June 29, 2013",
        "hidden": "<p>Google+ is fine for smartphone photos, but any pictures larger than 2048 x 2048 start to \n<a href=\"https://support.google.com/plus/answer/156348?hl=en\">take up valuable Google Drive storage</a>. \nFor Dropbox, even my 21GB of free storage will go fast with 16.1MP (4912 x 3264) photos from my camera.  Because I'm cheep, and Flickr recently upgraded their free accounts to include a whopping 1TB of storage, I've decided to upload photos there.  </p>\n\n<p>After having used Flickr for over a month now, I can definitely say that I'm impressed. It's great for my basic uploading and grouping needs, and the <a href=\"http://flickr.com/photos/danrschlosser\">photostream view</a> is really nice to showcase my latest photos.  The NEX-6 is extremely portable and takes surprisingly beautiful photos, and it's nice to be able to throw my SD card into my laptop and have a batch of photos uploaded to my stream in under and hour.  </p>\n\n<p>Flickr is far from perfect though. It lacks the ability to download photos en mass, and sharing photos to social networks is a little finicky.  It's easy to share one photo or an entire set, but there isn't an easy way to share the best three photos, for example.  The NEX-6 can beam photos to my phone over Wi-Fi Direct, which sort of solves this problem, but it would be nice to be able to post multiple photos from my computer as well.  </p>\n\n<p>Posting to Flickr feels a little weird still, most because it's fairly disconnected from the rest of the Internet. (Who really goes and checks for updates on someone's Flickr feed?)  Unless Facebook or Google+ were able to pull in all of my Flickr photos automatically, there really isn't a great solution to these problems.  I certainly glad I moved to Flickr though, there's nothing worse than the feeling that Facebook is the only place where I store my photos online. If I want the perfect free photo-upload service, I'll have to write it myself, I guess.  Big surprise.  </p>",
        "preview": "<p>In a bold step towards getting into photography, I bought the Sony Alpha NEX-6, a mirrorless interchangeable lens camera with the kit 16-55mm lens.  Although I'm an absolute novice photographer, I'm trying to take myself seriously, and have committed to uploading my photos to <a href=\"http://flickr.com/photos/danrschlosser\">my Flickr account</a>. In an age of Dropbox and Google+ instant photo upload, I wasn't convinced that I would need a dedicated service for my photos.  My Galaxy Nexus uploads every food pic and selfie without being asked, which is great, but both Google+ and Dropbox have their disadvantages when handling pictures taken with a proper camera.  </p>",
        "id": "2013-06-29"
    },
    {
        "title": "A \"Hello World\" of sorts",
        "class": "2013-05-04",
        "date": "May 4, 2013",
        "hidden": "<p>As my website reaches launch, I want to take this opportunity to thank <a target=\"_blank\" href=\"http://alexsander.ca\">Alex Akers</a>, an iOS developer and friend who was extremely helpful in getting everything up and running.</p>\n\n<p>If you have thoughts or comments that you would like to share, please send me an email at <a href=\"mailto:dan@danrs.ch\">dan@danrs.ch</a>, I'd love to hear from you! Hello, World!</p>",
        "preview": "<p>How exciting, finally after over a year of rumination and weeks of development, <a href=\"http://danrs.ch/\">danrs.ch</a> is finally live!  This site has been in the pipeline for a while, and I certainly have some lofty goals for it in the future.  On this blog page, I will share my most recent thoughts and projects. I plan to post about technology, music, culture, or whatever else is affecting my life in the moment. </p>",
        "id": "2013-05-04"
    }
]